<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[String、StringBuilder、StringBuffer的异同 原理解析]]></title>
    <url>%2F2019%2F11%2F21%2FString%2F</url>
    <content type="text"><![CDATA[从大二开始 Java基础就没怎么看过 都是看的框架开发一类的,重温一下Java基础知识这次从源码入手，确实比第一次学的时候有更多新的收获这次写一下最常见的关于StringBuilder StringBuffer String三者的关系 及内部联系 String我们最常对三者进行比较的是运行效率 扩展字符串时 String会使用’+’号进行连接，我们也知道String这种方法拼接字符串会比StringBuffer慢为什么？ 我们看看源码便知道了 整体原因就是String对象是不可变对象 String类对象为不可变对象，一旦你修改了String对象的值，隐性重新创建了一个新的对象 1、final修饰类 引用变量 基本变量 1、一个类被final修饰则这个类是不能被继承的，没有子类。String类是一个final类，只能说明这个类不能被继承也就没有子类。2、如果一个引用变量被final修饰，则引用变量的值是不能修改，而不关被引用对象的事3、2中说的引用变量的值的问题，如果大家看了深入理解jvm这本书的话可能对这句话有印象：由于reference类型在java虚拟机规范中只规定了一个指向对象的引用，并没有规定这个引用应该通过何种方式去定位，访问堆中的对象的具体位置，具体实现因不同的虚拟机而不同，有句柄地址和对象地址两种4、句柄方式实现也就是在javaheap（堆内存）中分配了一个句柄池这个句柄池中存放着具体对象的地址，而引用变量中存放的是句柄池中某个句柄的地址，这种方式要查找两次地址所以速度有点慢。5、对象地址方式实现，引用变量中存放的就是javaheap(堆内存)中对象的地址。6、如果final修饰的是基本类型的变量则这个变量的值不能能修改，如果final修饰的是引用变量则这个引用变量的值不能改变也就是4,5 中所说的句柄的地址或对象的地址不能改变而他们所引用的对象的内容是可以改变的。 2、String类（1）、大家经常会说不要使用”+” 来连接字符串这样效率不高（相对于 StringBuilder、StringBuffer）那为什么那，看看下面： String str= “a”; str=str+”b”; str=str+”c”; 实现过程： String str= “a”;创建一个String对象，str 引用到这个对象。在创建一个长度为str.length() 的StringBuffer 对象1StringBuffer strb = new StringBuffer(str); 调用StringBuffer的append()方法将”b“添加进去,strb.append(“b”);调用strb 的toString()方法创建String对象，之前对象失去引用而str重新引用到这个新对 象。同样在创建StringBuffer对象 调用append()方法将”c“添加进去,调用toString()方法 创建String对象再将strb引用到 新创建的String对象。之前对象失去引用之后存放在常量池中，等待垃圾回收。 看到上面使用“+”连接字符串的过程，就明白了为什么要使用StringBuffer 来连接字符而不是使用String 的“+”来连接。 （2)、知道了使用”+“连接的过程，我们再来看看上面提到的使用”+“号为什么会创建新的对象，也就是说String对象是不可变对象。这里有个概念就是对象不可变，而String 的对象就是一个不可变对象。那什么叫对象不可变那： 当一个对象创建完成之后，不能再修改他的状态，不能改变状态是指不能改变对象内的成员变量，包括基本数据类型的值不能改变。引用类型的变量不能指向其他对象，引用类型指向的对象的状态也不能改变。对象一旦创建就没办法修改期所有属性，所以要修改不可变对象的值就只能重新创建对象。 ###3、String对象不可变 源码分析(1)、上面说了String 对象为不可变对象，为什么String 对象不可变，String对象的状态不能改变，接下来我们看看String 类的源码： jdk 1.7 的源码1234567891011public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; // The value is used for character storage. // 数组的被final修饰，所以数据引用变量的值不能变 private final char value[]; // Cache the hash code for the string // 缓存String对象的哈希值 private int hash; // Default to 0 我们会发现String 的底层是使用字符数组来实现的。String 类中只有两个成员变量一个是value 一个是hash，这个hash和我们讨论的问题没关系，通过注解我们知道他是缓存String对象的hash值 value 是一个被final修饰的数组对象，所以只能说他不能再引用到其他对象而不能说明他所引用的对象的内容不能改变。但我们在往下看源码就会发现String 类没有给这两个成员变量提供任何的方法所以我们也没办法修改所引用对象的内容，所以String 对象一旦被创建，这个变量被初始化后就不能再修改了，所以说String 对象是不可变对象。 (2)、String 对象不是提供了像replace()等方法可以修改内容的吗，其实这个方法内部创建了一个新String 对象 在把这个新对象重新赋值给了引用变量，看看源码你就相信了他是在内部重现创建了String 对象 1234567891011121314151617181920212223242526272829public String replace(char oldChar, char newChar) &#123; if (oldChar != newChar) &#123; int len = value.length; int i = -1; char[] val = value; // avoid getfield opcode while (++i &lt; len) &#123; if (val[i] == oldChar) &#123; break; &#125; &#125; if (i &lt; len) &#123; char buf[] = new char[len]; for (int j = 0; j &lt; i; j++) &#123; buf[j] = val[j]; &#125; while (i &lt; len) &#123; char c = val[i]; buf[i] = (c == oldChar) ? newChar : c; i++; &#125; // 创建新对象 return new String(buf, true); &#125; &#125; return this; &#125; 总结1、String 类是一个final 修饰的类所以这个类是不能继承的，也就没有子类。 2、String 类的成员变量都是final类型的并且没有提供任何方法可以来修改引用变量所引用的对象的内容，所以一旦这个对象被创建并且成员变量初始化后这个对象就不能再改变了，所以说String 对象是一个不可变对象。 3、使用“+”连接字符串的过程产生了很多String 对象和StringBuffer 对象所以效率相比直接使用StringBuffer 对象的append（） 方法来连接字符效率低很多。 4、引用变量是存在java虚拟机栈内存中的，它里面存放的不是对象，而是对象的地址或句柄地址。 5、对象是存在java heap(堆内存)中的值 6、引用变量的值改变指的是栈内存中的这个引用变量的值的改变是，对象地址的改变或句柄地址的改变，而对象的改变指的是存放在Java heap（堆内存）中的对象内容的改变和引用变量的地址和句柄没有关系。 StringBufferTODO： StringBuilderTODO：]]></content>
      <categories>
        <category>Java</category>
        <category>String类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf_1]]></title>
    <url>%2F2019%2F11%2F20%2FThymeleaf-1%2F</url>
    <content type="text"><![CDATA[## ## ##]]></content>
  </entry>
  <entry>
    <title><![CDATA[IDEA开发SpringBoot使用thymeleaf模板时 '$表达式'报红分析]]></title>
    <url>%2F2019%2F11%2F20%2FThymeleaf-error%2F</url>
    <content type="text"><![CDATA[在项目中首次用到了Thymeleaf模板开发 ，但是发现不管怎么看都没有错的代码 HTML页面中使用到‘$表达式’却总是报红，搜索了一下 发现其实并没有出错 但是看着很不舒服 便找了解决方法 解决标红的地方 问题情境 1:IDEA环境开发2:使用SpringBoot框架3:使用Thymeleaf前端框架开发4:Controller层填充数据到model中 并需要在页面中动态显示 1：Controller层2:entity Page对象3:html中1所有$&#123; &#125;表达式报红色波浪线 问题原因 虽然在后端的entity中添加了对象数据信息，但是此时的程序并未开始运行，所以对于前端文件是无法感知到填充对象的。而我们的IDEA默认要对thymeleaf的数据进行验证，所以这个时候就会有红色波浪线存在了！但此时并没有发生错误 解决方法 解决方案一：对每个飘红的地方进行注解（只有当前行设置生效) 缺点： 每一处都要注解：非常麻烦，HTML文档会因此显得非常臃肿,可读性差 使用的属性无法解决报红 在报红的地方 按alt+enter键自动修正即可 但是如果只用到了model中的属性 此方法并没有什么用处 解决方案二：压制HTML中文件的警告或者错误（只有当前文件中设置生效） 需要在&lt; ! DOCTYPE html &gt;下添加一条注释suppress ThymeleafVariablesResolveInspection 压制 Thymeleaf的警告信息1&lt;!-- suppress ThymeleafVariablesResolveInspection --&gt; 或者添加 suppress ALL 压制所有警告信息1&lt;!--suppress ALL--&gt; 之后本页所有的报错都会消失 第三种方案：关闭IDEA对于thymeleaf的数据验证选项（全局所有文件都会应用设置，飘红消失）强迫症福音！ Setting中调整Inspections里面 选择Thymeleaf的报红选项 取消勾选即可 之后项目中所有页面关于Thymeleaf的报错都会消失]]></content>
      <categories>
        <category>Java</category>
        <category>Thymeleaf</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开发框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSAPP_1]]></title>
    <url>%2F2019%2F11%2F04%2FCSAPP-1%2F</url>
    <content type="text"><![CDATA[这一章首先讲解C语言的版本，对应于不同的GCC命令参数。其次信息的表示是二进制，这就有一个大小端的问题（big endian/little endian），关于这个问题，我用“Intel小不点”表示Intel是小端并且小端是不符合常规的（低位在前，而常规是高位在前）。 其次介绍了布尔代数，关于异或:x^y=(x&amp;~y)|(~x&amp;y)。紧接着是算术移位和逻辑移位的区别。 下面就是本章的重点了，关于Unsigned Encoding和Two’s Complement Encoding的讨论，我们一直习惯于认为补码就是原码取反加一，但是这里给出了定义，就是最高位为1代表-2^W，而无符号整数最高位为1代表+2^W，关于他们的加减乘除的转换有一系列的公式，介绍得很详细，有一点最重要的是不管如何赋值其二进制是不变的，赋值给Unsigned int就按无符号整数处理，赋值给Signed int就按二进制补码处理，如何解读与其二进制的1、0组合无关。 接着是IEEE754浮点数标准、浮点数舍入规则等等的介绍，没有过于深入，有兴趣的读者可以看看组成原理中关于这一部分的介绍。 ## ## ##]]></content>
  </entry>
  <entry>
    <title><![CDATA[错题笔记]]></title>
    <url>%2F2019%2F06%2F04%2FExercises%2F</url>
    <content type="text"><![CDATA[临近期末考试也没有学什么新的东西，平时做做题查缺补漏，发现好多细碎点自己都不知道总结一下 方便以后看， 常更 Java语言Java 鲁棒性的特点 鲁棒：robust，稳定。鲁棒性就是稳定性 Java鲁棒性的特点如下： 1:Java在编译和运行程序时都要对可能出现的问题进行检查，以防止错误的产生。2:Java编译器可以查出许多其他语言运行时才能发现的错误。Java不支持指针操作，大大减少了错误发生的可能性。3:Java具有异常处理的功能，当程序异常时，它能捕获并响应意外情况，以保证程序能稳妥地结束，计算机系统不会崩溃。 关于关键字null是关键字，NULL不是关键字，java区分大小写 所有的关键字都是小写 线程程序运行结果：12345678910111213public static void main(String args[]) &#123; Thread t=new Thread()&#123; public void run()&#123; dianping(); &#125; &#125;; t.run(); System.out.print("dazhong"); &#125; static void dianping()&#123; System.out.print("dianping");&#125; A:dazhongdianpingB:dianpingdazhongC:AB都可能 如果调用run（） 选b如果调用start（） 选c因为调用start后并不保证线程启动的顺序 ## ##]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>查缺补漏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat安装配置]]></title>
    <url>%2F2019%2F05%2F12%2FTomcatInstall%2F</url>
    <content type="text"><![CDATA[简单讲解Tomcat的安装配置 以及目录结构 用户设置等 简介：Tomcat 是一个免费的开放源代码的 Servlet 容器 下载安装：在Tomcat官网 Download处选择版本进行下载 此处选择Windows下64位的压缩包 解压到目录文件之后 根据路径信息添加环境变量，进入计算机属性设置—&gt;高级系统设置—&gt;环境变量 添加 变量名：CATALINA_HOME变量值：你自己的安装路径 变量名：TOMCAT_HOME变量值：你自己的安装路径 同时在系统变量Path中添加 %CATALINA_HOME%\lib%TOMCAT_HOME%\bin 有时候出现问题 也可以直接添加所安装的Tomcat路径下的bin目录地址：（二选一） 尝试启动Tomcat：打开命令行 输入： startup 之后 打开浏览器输入localhost:8080看见欢迎界面表示配置成功 Tomcat 的目录结构打开Tomcat安装路径 可以看到下面的结构 bin –&gt;启动和关闭 Tomcat 的脚本文件conf –&gt; 服务器的各种配置文件lib –&gt; 服务器和所有 web 应用程序需要访问的 jar 文件logs –&gt;日志文件temp –&gt;运行时产生的临时文件webapps –&gt;发布 web 应用程序时，web 应用程序的目录及文件work –&gt;JSP 生成的 Servlet 源文件和字节码文件 配置用户信息Tomcat Manager的用户配置在 Tomcat安装目录/conf/tomcat-users.xml文件中进行管理一个user节点表示单个用户，属性username和password分别表示登录的用户名和密码，属性roles 表示该用户所具备的权限添加用户时根据上面的格式更改自己的用户名密码即可 其他的不必修改 添加完成后再次启动Tomcat时 访问主页 输入用户名密码后即可进入自己的项目管理界面]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于TCP/IP的Java网络编程]]></title>
    <url>%2F2019%2F05%2F07%2FSocket%2F</url>
    <content type="text"><![CDATA[这学期学的计算机网络这门课 发现确实挺有意思 看完书和试验觉得看Java寄出的时候没有去细看网络编程这一部分，现在了解了网络知识之后回头来补这段java基础本文主要是想记录一下初学计算机网络这门课的一些认识以及写一些用Java语言基于TCP/IP协议编程的实际操作中遇到的一些小坑主要是Java进行编写客户服务器之间的通信 对网络基础只是简单的进行描述 并不会长篇大论初学 理解不深 只是简单的进行了一个小的实验 帮助自己理解 以后再补充 计算机网络基础首先说一下以太网最基本最重要的知识——OSI参考模型 OSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互联模型。该体系结构标准定义了网络互联的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层），即OSI开放系统互连参考模型。在这一框架下进一步详细规定了每一层的功能，以实现开放系统环境中的互连性、互操作性和应用的可移植性 简单来说就是推荐所有公司使用这个规范来控制网络，这样所有公司都有相同的规范，就能互联了分七层从下到上分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层但是由于这个模型太理想化 而我们在大多数情况下使用的都是TCP/IP五层模型：应用层 传输层 网络层 链路层 物理层而每一层都有他的主要功能和代表协议 此处不再细说 略见下图： 而此处的Java网络编程（也叫Socket编程）就是使用位于传输层的TCP或者UDP协议进行的之后我们来主要说一下这两个协议 TCP &amp; UDP两者都是位于传输层的协议面向连接的TCP（Transmission Control Protocol，传输控制协议） 1，可靠性：它是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接。（三次握手）2，拥有拥塞控制 流量控制3，不提供时间 最小吞吐量保证 安全性保证等4，适用于传输要求高的5，TCP进行通信的两个应用进程 客户端服务端 面向非连接的UDP协议 1，不可靠：不需要建立传输连接2，没有拥塞控制，流量控制 吞吐量保证3，发送数据结束时无需释放资源 速度快4，适用于要求不高的少量数据5，每个数据报大小限制在64K之内 三次握手TCP在传输之前会进行三次沟通，一般称为“三次握手”，传完数据断开的时候要进行四次沟通，一般称为“四次挥手”此处先只说一下”三次握手” 先形象化的说一下： 在晚上灯光暗的时候 你看见一个女生迎面走来 你不确定人不认识她：你首先向妹子招手(syn)，妹子看到你向自己招手后，向你点了点头挤出了一个微笑(ack)。你看到妹子微笑后确认了妹子成功辨认出了自己(进入estalished状态)。 但是妹子有点不好意思，向四周看了一看，有没有可能你是在看别人呢，她也需要确认一下。妹子也向你招了招手(syn)，你看到妹子向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(ack)，妹子看到对方的微笑后确认了你就是在向自己打招呼(进入established状态)。两个人确认是熟人于是你们打招呼成功。 过程分四个动作： 1，你招手2，女生点头微笑3，女生向你招手4，你点头微笑 2和3合并成一个动作 就形成了三次握手的形象化 其实本质上 三次握手第二次就是一个两个动作的整合 下面我们说一下专业化的语言 三次握手：第一次：客户机给服务器发送请求连接（此时客户端不知道请求是否发送成功）第二次：服务器给客户端反馈答复(服务端接收到 客户端发送成功进行反馈 服务器不知道自己是否发送成功)第三次：客户端在给服务端反馈（双方都确认可以进行发送和接收）表示可以建立连接需要用到的概念两个序号： （1）序号：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记（2）确认序号：ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。 两个标志位： （A）ACK：确认序号有效。（B）SYN：发起一个新连接。 需要注意的是： （A）不要将确认序号ack与标志位中的ACK搞混了。 （B）确认方ack=发起方req+1，两端配对。 主要过程： （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=X(就是客户端的数据初始地址) 并将该数据包发送给Server Client进入SYN_SENT状态 等待Server确认。（2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=X+1，随机产生一个值seq=Y(就是服务器端划分出的存储初始地址)，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。（3）第三次握手：Client收到确认后，检查ack是否为X+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=Y+1，并将该数据包发送给Server，Server检查ack是否为Y+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。 过程如下图所示： Socket由 IP地址和端口号 组成的套接字利用套接字开发应用程序被广泛使用 通信的两端都要有SocketSocket允许程序把网络连接当成一个流 数据可以在两个Socket之间通过IO进行传输一般主动发起通信的应用程序是客户端 等待通信请求的是服务端 网络编程实际上就是Socket编程 Socket编程实例使用Socket进行基于TCP的简单编程原理与IO流输入输出一致 客户端给服务端发送消息 服务端输出信息到控制台上服务器端收到信息后给客户端进行反馈 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100public class TestTCP &#123; //客户端 @Test public void client()&#123; Socket socket = null; OutputStream outputStream = null; InputStream inputStream = null; try &#123; socket = new Socket(InetAddress.getByName("127.0.0.1"),8989); outputStream = socket.getOutputStream(); outputStream.write("I'm Client".getBytes()); socket.shutdownOutput(); inputStream = socket.getInputStream(); byte[] b= new byte[20]; int len; while ((len=inputStream.read(b))!=-1)&#123; String s = new String(b,0,len); System.out.println(s); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;finally &#123; if (inputStream!=null)&#123; try &#123; inputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (outputStream!=null)&#123; try &#123; outputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (socket!=null)&#123; try &#123; socket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; //服务器端 @Test public void server()&#123; ServerSocket serverSocket = null; Socket socket = null; InputStream inputStream = null; OutputStream outputStream =null; try &#123; serverSocket = new ServerSocket(8989); socket = serverSocket.accept(); inputStream = socket.getInputStream(); byte[] b = new byte[20]; int len; while((len = inputStream.read(b))!=-1)&#123; String s = new String(b,0,len); System.out.println(s); &#125; outputStream=socket.getOutputStream(); outputStream.write("I have recieve your message".getBytes()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;finally &#123; if (outputStream!=null)&#123; try &#123; outputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (inputStream!=null)&#123; try &#123; inputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (socket!=null)&#123; try &#123; socket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (serverSocket!=null)&#123; try &#123; serverSocket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; 执行时先启动服务器端 再启动客户端服务器端启动后无任何反馈 等待客户端启动 客户端启动后 两端的显示如下： 服务器端： 客户端： 注意（排坑）一：如程序中所写Socket由IP地址和端口号两部分组成 Socket=IP地址+端口号 二： 因为read()方式是堵塞式的：没有东西进行输入的话就会处于等待 服务器端用read（）接受但是服务端不知道客户端什么时候发送完数据 就一直处于等待 处于堵塞状态下方程序因此无法进行 所以如果发送完数据的话 应该告诉服务端：我已经发送完毕类似于三次握手确认阶段的实现 我第一次写的时候因为没有注意到这一点 导致服务器端接收到了第一次客户端发送到字段但是一直处于运行状态 而客户端没有数据显示 此时需要在发送方写入方法之后加上一行1socket.shutdownOutput(); 用来告诉接收端：”我已经发送完毕” 可以开始接收 三：使用完的Socket IO流等记得在程序中加上关闭语句 防止机器资源浪费 写于计网期中考试完毕的一个反思夜晚 以后再进行补充]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String 之 intern()方法的测试分析]]></title>
    <url>%2F2019%2F04%2F15%2FJava-intern%2F</url>
    <content type="text"><![CDATA[这两天从新开始看深入理解Java虚拟机那本书了 但看到虚拟机数据区的关系时发现，之前String里面的intern方法知识点有点模糊 以前也没细看过今天问了问同学 查了一下资料 开始补坑记录一下Java String类里面的一个方法理解 new String() &amp; String思考1String s = new String("maccha"); 定义了几个对象回答：若常量池中已经存在 “maccha”，则直接引用，也就是此时只会创建一个对象，如果常量池中不存在 “maccha”，则先创建后引用，也就是有两个。 String str=”maccha”；Stringstr=new String (“maccha”);的区别：在这里，先说下”常量池”概念。常量池(constant pool) 指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、 法、接口等中的常量，也包括字符串常量。 Test1：12345String a0 = "maccha"; String a1 = "maccha"; String a2 = "mac"+"cha";System.out.println(a0==a1);System.out.println(a0==a2); 结果为：首先，我们要知道Java会确保一个字符串常量只有一个拷贝。因为例子中的s0和s1中的”maccha”都是字符串常量，它们在编译期就确定了，所以s0==s1为true；而”mac”和”cha”也都是字符串常量，当一个字符串由多个字符串常量连接而成时，自己肯定也是字符串常量，所以s2也同样在编译期就被解析为一个字符串常量，所以s2也是常量池中”maccha”的一个引用。我们得出s0==s1==s2;用new创建的字符串不是常量，不能在编译期就确定，所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。 Test2：1234567String s0 = "maccha";String s1 = new String("maccha");String s2 = "mac"+new String ("cha");System.out.println(s0 == s1);System.out.println(s0 == s2);System.out.println(s1 == s2); 结果为：例2中s0还是常量池中”maccha”的引用s1因为无法在编译期确定，所以是运行时创建的新对象”maccha”的引用s2因为有后半部分new String(“cha”)所以也无法在编译期确定，也是一个新创建对象”maccha”的应用 String.intern()：定义：语法1public String intern() 返回值一个字符串，内容与此字符串相同，但一定取自具有唯一字符串的池。 存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。就是JVM书中所说的运行时常量池String的intern()方法就是扩充常量池的最常见的方法运用 当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用 Test3：1234567891011121314String s0= "maccha";String s1= new String("maccha");String s2= new String("maccha");System.out.println(s0==s1 );System.out.println("---------------------");s1.intern();s2=s2.intern(); //把常量池中“maccha”的引用赋给s2System.out.println(s0==s1);System.out.println(s0==s1.intern() );System.out.println(s0==s2 ); 结果为： Test4：1234567//不声名"maccha"常量String s1=new String("maccha");String s2=s1.intern();System.out.println(s1==s1.intern() );System.out.println(s1+" "+s2 );System.out.println(s2==s1.intern() ); 结果：在这个类中我们没有声名一个”maccha”常量常量池中最初是没有”maccha”的当我们调用s1.intern()后就在常量池中新添加了一个”maccha”常量原来的不在常量池中的”maccha”仍然存在，所以并不是 如果在表中没有相同值的字符串,将自己的地址注册到常量池中 s1==s1.intern()为false说明原来的“maccha”仍然存在；s2现在为常量池中“maccha”的地址，所以有s2==s1.intern()为true。 查资料时发现有好多讲的挺细致的收货不小,下面是查资料时的的详细介绍:String 之 new String（）和 intern（）方法深入分析]]></content>
      <categories>
        <category>Java</category>
        <category>String类</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下使用VMware安装Ubantu虚拟机实操记录]]></title>
    <url>%2F2019%2F04%2F13%2FVMwareInstall%2F</url>
    <content type="text"><![CDATA[小记：刚刚开通博客 正好刚重新做了一遍实验课 就拿这篇来用Markdown写博客练练手 顺便回忆一下安装虚拟机的过程此篇记录内容包括： 安装VMware 创建虚拟机 虚拟机上Ubantu系统的安装 详见下文： 安装环境windows操作系统物理机VMware Workstation 软件（可以在网上下载）Ubantu-14.04.6镜像文件（其他版本都大同小异，这里以Ubantu14.04为例）另外一点外网原因可能网站上下载的有些慢 提供一下我的下载地址,还是蛮快的:http://mirrors.aliyun.com/ubuntu-releases/14.04/里面有各种不同的版本 虚拟机的下载：1.进入VMware官网，点击下载，再点击图中标记的Workstation Pro，如下图所示。 2.根据操作系统选择合适的产品，在这里以Windows系统为例，点击转至下载，如下图所示 3.在1处可以选择版本，默认为最新版本。选择好版本后点击立即下载，下载速度很慢的话，建议科学上网一下。 虚拟机的安装：1.打开.exe文件， 即可开始安装。(因为我已经安装过了所以此处选了一个文件包里的汉化版进行演示，还是建议选用原版) 2.安装位置默认在C盘下，在这里我选择安装在F盘，安装路径尽量不要有中文。 3.等待安装就好了。 4.安装成功后，第一次运行程序会让输入密钥，这个自己百度，分享一下我搜的密钥 有能用的可以用一下：CG54H-D8D0H-H8DHY-C6X7X-N2KG6ZC3WK-AFXEK-488JP-A7MQX-XL8YFAC5XK-0ZD4H-088HP-9NQZV-ZG2R4ZC5XK-A6E0M-080XQ-04ZZG-YF08DZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8FF590-2DX83-M81LZ-XDM7E-MKUT4FF31K-AHZD1-H8ETZ-8WWEZ-WUUVACV7T2-6WY5Q-48EWP-ZXY7X-QGUWDAALYG-20HVE-WHQ13-67MUP-XVMF35.点击完成即可。6.运行 可以看到以下界面即安装完成： 创建新的虚拟机1.打开VMware Workstation点击创建新的虚拟机 选择自定义点击下一步：典型的虚拟机大部分是系统默认选项我们没法改，你如果只是为了单纯创建个虚拟机不做其他用途可以选择典型 此处我们选择自定义2 选择安装虚拟机的版本 点击下一步3 选择稍后安装操作系统 点击下一步4 客户机系统选择Linux 版本我们选择安装的Ubantu 64位（按照电脑自身配置选择64或者32位）一般向下兼容5 虚拟名称 可以随便选择位置最好创建一个新的文件夹存放虚拟机对应文件存储目录 也可以直接默认6 处理器这个根据你电脑情况来选如果你的电脑是八核你可以选2核或4核如果你处理器是四核你可以选1核或2核只要不超过你电脑本身核数就行，超过了你的虚拟机就可能启动不起来演示就直接默认选择了7 虚拟机内存这个也是根据你电脑自身情况来选最好按推荐来，如果虚拟机内存过高会影响你电脑流畅性 够用就好8 可以上网 选择桥接网络或者net模式，演示选择使用桥接网络9 IO控制器类型和磁盘类型推荐默认即可 下一步 10 选择创建新磁盘 磁盘大小只是我们给定的空间，后面进行分区时才是它的真实大小 不能太小，太小系统就装不上了，默认分配20G即可 选择拆分多个文件。 11 储存磁盘位置 自己选择12 点击自定义硬件 并在CD/DVD 处选择使用ISO映像文件此处 把开头下载好的ISO文件选中 添加即可 完成！ Linux系统安装1 点击开启虚拟机 点击Install Ubantu即可2 直接点击继续即可 下同 3 选择所在地区 此处选择上海就行 4 选择键盘的文字 英语最好 当然觉得别扭的话可以选择中文 5 在此处设置你的用户名和密码 下面可以选择自动登录和每次输入密码登录 觉得麻烦可以选第一个自动登录 重启即可完成安装系统 到此结束啦 这么多图 你的虚拟机装好了吗]]></content>
      <tags>
        <tag>基础</tag>
        <tag>Linux</tag>
        <tag>安装配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
