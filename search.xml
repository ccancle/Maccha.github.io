<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>String 之 intern()方法的测试分析</title>
      <link href="/2019/04/15/Java-intern/"/>
      <url>/2019/04/15/Java-intern/</url>
      
        <content type="html"><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>这两天从新开始看深入理解Java虚拟机那本书了 但看到虚拟机数据区的关系时发现，之前String里面的intern方法知识点有点模糊 以前也没细看过<br>今天问了问同学 查了一下资料 开始补坑<br>记录一下Java String类里面的一个方法理解<br><a id="more"></a></p><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p><strong>语法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intern</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p><strong>返回值</strong><br><em>一个字符串，内容与此字符串相同，但一定取自具有唯一字符串的池。</em></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"maccha"</span>);</span><br></pre></td></tr></table></figure><p>定义了几个对象<br><em>回答：若常量池中已经存在 “maccha”，则直接引用，也就是此时只会创建一个对象，如果常量池中不存在 “maccha”，则先创建后引用，也就是有两个。</em></p><p>String str=”maccha”；<br>String<br>str=new String (“maccha”);的区别：<br>在这里，先说下”常量池”概念。<br><strong>常量池</strong>(constant pool)<br>    指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、<br>    法、接口等中的常量，也包括字符串常量。<br><strong>Test1：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a0 = <span class="string">"maccha"</span>;   </span><br><span class="line">String a1 = <span class="string">"maccha"</span>;   </span><br><span class="line">String a2 = <span class="string">"mac"</span>+<span class="string">"cha"</span>;</span><br><span class="line">System.out.println(a0==a1);</span><br><span class="line">System.out.println(a0==a2);</span><br></pre></td></tr></table></figure></p><p>结果为：<br><img src="/2019/04/15/Java-intern/demo1.png" alt="输出1"><br>首先，我们要知道Java会确保一个字符串常量只有一个拷贝。<br>因为例子中的s0和s1中的”maccha”都是字符串常量，它们在编译期就确定了，<br>所以s0==s1为true；<br>而”mac”和”cha”也都是字符串常量，当一个字符串由多个字符串常量连接而成时，<br>自己肯定也是字符串常量，所以s2也同样在编译期就被解析为一个字符串常量，<br>所以s2也是常量池中”maccha”的一个引用。<br>我们得出s0==s1==s2;<br>用<strong>new</strong>创建的字符串不是常量，不能在编译期就确定，<br>所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。</p><p><strong>Test2：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s0 = <span class="string">"maccha"</span>;</span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"maccha"</span>);</span><br><span class="line">String s2 = <span class="string">"mac"</span>+<span class="keyword">new</span> String (<span class="string">"cha"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s0 == s1);</span><br><span class="line">System.out.println(s0 == s2);</span><br><span class="line">System.out.println(s1 == s2);</span><br></pre></td></tr></table></figure></p><p>结果为：<br><img src="/2019/04/15/Java-intern/demo2.png" alt="输出2"><br>例2中s0还是常量池中”maccha”的引用<br>s1因为无法在编译期确定，所以是运行时创建的新对象”maccha”的引用<br>s2因为有后半部分new String(“cha”)所以也无法在编译期确定，<br>也是一个新创建对象”maccha”的应用</p><h2 id="String-intern-："><a href="#String-intern-：" class="headerlink" title="String.intern()："></a>String.intern()：</h2><p>存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。<br>就是JVM书中所说的运行时常量池<br>String的intern()方法就是扩充常量池的最常见的方法运用</p><blockquote><p>当一个String实例str调用intern()方法时，<br>Java查找常量池中是否有相同Unicode的字符串常量<br>如果有，则返回其的引用，<br>如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用</p></blockquote><p><strong>Test3：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s0= <span class="string">"maccha"</span>;</span><br><span class="line">String s1= <span class="keyword">new</span> String(<span class="string">"maccha"</span>);</span><br><span class="line">String s2= <span class="keyword">new</span> String(<span class="string">"maccha"</span>);</span><br><span class="line">System.out.println(s0==s1 );</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">s1.intern();</span><br><span class="line">s2=s2.intern(); <span class="comment">//把常量池中“maccha”的引用赋给s2</span></span><br><span class="line"></span><br><span class="line">System.out.println(s0==s1);</span><br><span class="line"></span><br><span class="line">System.out.println(s0==s1.intern() );</span><br><span class="line"></span><br><span class="line">System.out.println(s0==s2 );</span><br></pre></td></tr></table></figure></p><p>结果为：<br><img src="/2019/04/15/Java-intern/demo3.png" alt="输出3"></p><p>看例4：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不声名"maccha"常量</span></span><br><span class="line">String s1=<span class="keyword">new</span> String(<span class="string">"maccha"</span>);</span><br><span class="line">String s2=s1.intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s1==s1.intern() );</span><br><span class="line">System.out.println(s1+<span class="string">" "</span>+s2 );</span><br><span class="line">System.out.println(s2==s1.intern() );</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/2019/04/15/Java-intern/demo4.png" alt="输出4"><br>在这个类中我们没有声名一个”maccha”常量<br>常量池中最初是没有”maccha”的<br>当我们调用s1.intern()后就在常量池中新添加了一个”maccha”常量<br>原来的不在常量池中的”maccha”仍然存在，所以并不是</p><blockquote><p>如果在表中没有相同值的字符串,将自己的地址注册到常量池中</p></blockquote><p>s1==s1.intern()为false说明原来的“maccha”仍然存在；<br>s2现在为常量池中“maccha”的地址，所以有s2==s1.intern()为true。</p><p>查资料时发现有好多讲的挺细致的<br>收货不小,下面是查资料时的的详细介绍:<br><a href="https://blog.csdn.net/qq_41928979/article/details/89313835" target="_blank" rel="noopener">String 之 new String（）和 intern（）方法深入分析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下使用VMware安装Ubantu虚拟机实操记录</title>
      <link href="/2019/04/13/VMwareInstall/"/>
      <url>/2019/04/13/VMwareInstall/</url>
      
        <content type="html"><![CDATA[<h2 id="小记："><a href="#小记：" class="headerlink" title="小记："></a>小记：</h2><p>刚刚开通博客 正好刚重新做了一遍实验课 就拿这篇来用Markdown写博客练练手 顺便回忆一下安装虚拟机的过程<br>此篇记录内容包括：</p><p>   安装VMware    </p><p>   创建虚拟机</p><p>   虚拟机上Ubantu系统的安装</p><p>详见下文：<br><a id="more"></a></p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>windows操作系统物理机<br>VMware Workstation 软件（可以在网上下载）<br>Ubantu-14.04.6镜像文件（其他版本都大同小异，这里以Ubantu14.04为例）<br>另外一点外网原因可能网站上下载的有些慢 提供一下我的下载地址,还是蛮快的:<br><a href="http://mirrors.aliyun.com/ubuntu-releases/14.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/14.04/</a><br>里面有各种不同的版本   </p><h2 id="虚拟机的下载："><a href="#虚拟机的下载：" class="headerlink" title="虚拟机的下载："></a>虚拟机的下载：</h2><p>1.进入<a href="https://www.vmware.com/cn.html" target="_blank" rel="noopener">VMware</a>官网，点击下载，再点击图中标记的Workstation Pro，如下图所示。<br>  <img src="/2019/04/13/VMwareInstall/download1.png" alt="下载1"><br>2.根据操作系统选择合适的产品，在这里以Windows系统为例，点击转至下载，如下图所示<br>  <img src="/2019/04/13/VMwareInstall/download2.jpg" alt="下载2"><br>3.在1处可以选择版本，默认为最新版本。选择好版本后点击立即下载，下载速度很慢的话，建议科学上网一下。<br>  <img src="/2019/04/13/VMwareInstall/download3.png" alt="下载3"></p><h2 id="虚拟机的安装："><a href="#虚拟机的安装：" class="headerlink" title="虚拟机的安装："></a>虚拟机的安装：</h2><p>1.打开.exe文件， 即可开始安装。<br>(因为我已经安装过了所以此处选了一个文件包里的汉化版进行演示，还是建议选用原版)<br>  <img src="/2019/04/13/VMwareInstall/VMwareInstall1.png" alt="安装1"><br> 2.安装位置默认在C盘下，在这里我选择安装在F盘，安装路径尽量不要有中文。<br>  <img src="/2019/04/13/VMwareInstall/VMwareInstall2.png" alt="安装2"><br>3.等待安装就好了。   </p><p>4.安装成功后，第一次运行程序会让输入密钥，这个自己百度，分享一下我搜的密钥 有能用的可以用一下：<br>CG54H-D8D0H-H8DHY-C6X7X-N2KG6<br>ZC3WK-AFXEK-488JP-A7MQX-XL8YF<br>AC5XK-0ZD4H-088HP-9NQZV-ZG2R4<br>ZC5XK-A6E0M-080XQ-04ZZG-YF08D<br>ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8<br>FF590-2DX83-M81LZ-XDM7E-MKUT4<br>FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA<br>CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD<br>AALYG-20HVE-WHQ13-67MUP-XVMF3<br><img src="/2019/04/13/VMwareInstall/VMwareInstall3.jpg" alt="安装3"><br>5.点击完成即可。<br>6.运行 可以看到以下界面即安装完成：<br><img src="/2019/04/13/VMwareInstall/over.jpg" alt="界面">  </p><h2 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h2><p>1.打开VMware Workstation点击创建新的虚拟机  选择自定义点击下一步：<br>典型的虚拟机大部分是系统默认选项我们没法改，<br>你如果只是为了单纯创建个虚拟机不做其他用途可以选择典型 此处我们选择自定义<br><img src="/2019/04/13/VMwareInstall/create1.png" alt="创建1"><br>2 选择安装虚拟机的版本 点击下一步<br><img src="/2019/04/13/VMwareInstall/create2.png" alt="创建2"><br>3 选择稍后安装操作系统 点击下一步<br><img src="/2019/04/13/VMwareInstall/create3.png" alt="创建3"><br>4  客户机系统选择Linux  版本我们选择安装的Ubantu 64位<br>（按照电脑自身配置选择64或者32位）一般向下兼容<br><img src="/2019/04/13/VMwareInstall/create4.png" alt="创建4"><br>5 虚拟名称 可以随便选择<br>位置最好创建一个新的文件夹存放虚拟机对应文件存储目录 也可以直接默认<br><img src="/2019/04/13/VMwareInstall/create5.png" alt="创建5"><br>6 处理器这个根据你电脑情况来选<br>如果你的电脑是八核你可以选2核或4核<br>如果你处理器是四核你可以选1核或2核<br>只要不超过你电脑本身核数就行，超过了你的虚拟机就可能启动不起来<br>演示就直接默认选择了<br><img src="/2019/04/13/VMwareInstall/create6.png" alt="创建6"><br>7 虚拟机内存这个也是根据你电脑自身情况来选<br>最好按推荐来，如果虚拟机内存过高会影响你电脑流畅性 够用就好<br><img src="/2019/04/13/VMwareInstall/create7.png" alt="创建7"><br>8 可以上网 选择桥接网络或者net模式，演示选择使用桥接网络<br><img src="/2019/04/13/VMwareInstall/create8.png" alt="创建8"><br>9 IO控制器类型和磁盘类型推荐默认即可 下一步<br><img src="/2019/04/13/VMwareInstall/create9.png" alt="创建9"><br><img src="/2019/04/13/VMwareInstall/create10.png" alt="创建10"><br> 10 选择创建新磁盘<br><img src="/2019/04/13/VMwareInstall/create11.png" alt="创建11"><br>  磁盘大小只是我们给定的空间，后面进行分区时才是它的真实大小<br>  不能太小，太小系统就装不上了，默认分配20G即可<br>  选择拆分多个文件。<br><img src="/2019/04/13/VMwareInstall/create12.png" alt="创建12"><br> 11 储存磁盘位置 自己选择<br><img src="/2019/04/13/VMwareInstall/create13.png" alt="创建13"><br>12 点击自定义硬件 并在CD/DVD 处选择使用ISO映像文件<br><img src="/2019/04/13/VMwareInstall/create14.png" alt="创建14"><br>此处 把开头下载好的ISO文件选中 添加即可<br><img src="/2019/04/13/VMwareInstall/create15.png" alt="创建15"><br> 完成！</p><h1 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h1><p>1 点击开启虚拟机 点击Install Ubantu即可<br><img src="/2019/04/13/VMwareInstall/last1.png" alt="系统1"><br>2 直接点击继续即可 下同<br><img src="/2019/04/13/VMwareInstall/last2.png" alt="系统2"><br><img src="/2019/04/13/VMwareInstall/last3.png" alt="系统3">    </p><p>3 选择所在地区 此处选择上海就行<br><img src="/2019/04/13/VMwareInstall/last4.png" alt="系统4">  </p><p>4 选择键盘的文字 英语最好 当然觉得别扭的话可以选择中文<br><img src="/2019/04/13/VMwareInstall/last5.png" alt="系统5">  </p><p>5 在此处设置你的用户名和密码 下面可以选择自动登录和每次输入密码登录<br>  觉得麻烦可以选第一个自动登录<br><img src="/2019/04/13/VMwareInstall/last6.png" alt="系统6"><br> 重启即可完成安装系统</p><h2 id="到此结束啦-这么多图-你的虚拟机装好了吗"><a href="#到此结束啦-这么多图-你的虚拟机装好了吗" class="headerlink" title="到此结束啦  这么多图  你的虚拟机装好了吗"></a>到此结束啦  这么多图  你的虚拟机装好了吗</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/13/hello-world/"/>
      <url>/2019/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
